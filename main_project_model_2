{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jkranyak/project_3/blob/main/April218pm_Cancer_Net_SCa_SecondModel_Project3.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ajir8HbswYNv",
        "outputId": "a7e8be86-968f-4766-efb1-0a9f51706f20"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gpu_info = !nvidia-smi\n",
        "gpu_info = '\\n'.join(gpu_info)\n",
        "if gpu_info.find('failed') >= 0:\n",
        "  print('Not connected to a GPU')\n",
        "else:\n",
        "  print(gpu_info)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vgin7OHmu0rG",
        "outputId": "dd979613-1e6f-4740-f8ff-83ba9f4d66c3"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mon Apr 22 00:06:24 2024       \n",
            "+---------------------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 535.104.05             Driver Version: 535.104.05   CUDA Version: 12.2     |\n",
            "|-----------------------------------------+----------------------+----------------------+\n",
            "| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                                         |                      |               MIG M. |\n",
            "|=========================================+======================+======================|\n",
            "|   0  Tesla V100-SXM2-16GB           Off | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   31C    P0              23W / 300W |      0MiB / 16384MiB |      0%      Default |\n",
            "|                                         |                      |                  N/A |\n",
            "+-----------------------------------------+----------------------+----------------------+\n",
            "                                                                                         \n",
            "+---------------------------------------------------------------------------------------+\n",
            "| Processes:                                                                            |\n",
            "|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n",
            "|        ID   ID                                                             Usage      |\n",
            "|=======================================================================================|\n",
            "|  No running processes found                                                           |\n",
            "+---------------------------------------------------------------------------------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "device_name = tf.test.gpu_device_name()\n",
        "if device_name != '/device:GPU:0':\n",
        "  raise SystemError('GPU device not found')\n",
        "print('Found GPU at: {}'.format(device_name))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k4kQdOaE5TIW",
        "outputId": "d548fdd7-b342-4147-b295-a60dfc836103"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found GPU at: /device:GPU:0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "78twcjW7yqk1",
        "outputId": "5de8489f-5cf2-4d5d-f009-96a7bfd060ab"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.15.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.5.4)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.25.2)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.0)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.11.0)\n",
            "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.36.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.62.1)\n",
            "Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.2)\n",
            "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n",
            "Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.27.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.6)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.31.0)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (5.3.3)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.4.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.2.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.5)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.6.0)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\n",
            "Collecting isic-cli\n",
            "  Downloading isic_cli-10.0.0-py3-none-any.whl (24 kB)\n",
            "Requirement already satisfied: click>=8 in /usr/local/lib/python3.10/dist-packages (from isic-cli) (8.1.7)\n",
            "Collecting django-s3-file-field-client>=1.0.0 (from isic-cli)\n",
            "  Downloading django_s3_file_field_client-1.0.1-py3-none-any.whl (3.2 kB)\n",
            "Collecting girder-cli-oauth-client<1.0.0 (from isic-cli)\n",
            "  Downloading girder_cli_oauth_client-0.4.0-py3-none-any.whl (8.1 kB)\n",
            "Requirement already satisfied: humanize in /usr/local/lib/python3.10/dist-packages (from isic-cli) (4.7.0)\n",
            "Collecting isic-metadata>=1.2.0 (from isic-cli)\n",
            "  Downloading isic_metadata-1.5.0-py3-none-any.whl (15 kB)\n",
            "Requirement already satisfied: more-itertools in /usr/local/lib/python3.10/dist-packages (from isic-cli) (10.1.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from isic-cli) (24.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from isic-cli) (2.31.0)\n",
            "Collecting retryable-requests (from isic-cli)\n",
            "  Downloading retryable_requests-0.1.2-py3-none-any.whl (7.5 kB)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from isic-cli) (13.7.1)\n",
            "Collecting sentry-sdk (from isic-cli)\n",
            "  Downloading sentry_sdk-1.45.0-py2.py3-none-any.whl (267 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m267.1/267.1 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tenacity in /usr/local/lib/python3.10/dist-packages (from isic-cli) (8.2.3)\n",
            "Collecting authlib (from girder-cli-oauth-client<1.0.0->isic-cli)\n",
            "  Downloading Authlib-1.3.0-py2.py3-none-any.whl (223 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m223.7/223.7 kB\u001b[0m \u001b[31m10.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pyxdg (from girder-cli-oauth-client<1.0.0->isic-cli)\n",
            "  Downloading pyxdg-0.28-py2.py3-none-any.whl (49 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.5/49.5 kB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: pydantic>=2.4 in /usr/local/lib/python3.10/dist-packages (from isic-metadata>=1.2.0->isic-cli) (2.7.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->isic-cli) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->isic-cli) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->isic-cli) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->isic-cli) (2024.2.2)\n",
            "Collecting requests-toolbelt (from retryable-requests->isic-cli)\n",
            "  Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.5/54.5 kB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->isic-cli) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->isic-cli) (2.16.1)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->isic-cli) (0.1.2)\n",
            "Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.4->isic-metadata>=1.2.0->isic-cli) (0.6.0)\n",
            "Requirement already satisfied: pydantic-core==2.18.1 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.4->isic-metadata>=1.2.0->isic-cli) (2.18.1)\n",
            "Requirement already satisfied: typing-extensions>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.4->isic-metadata>=1.2.0->isic-cli) (4.11.0)\n",
            "Requirement already satisfied: cryptography in /usr/local/lib/python3.10/dist-packages (from authlib->girder-cli-oauth-client<1.0.0->isic-cli) (42.0.5)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.10/dist-packages (from cryptography->authlib->girder-cli-oauth-client<1.0.0->isic-cli) (1.16.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.12->cryptography->authlib->girder-cli-oauth-client<1.0.0->isic-cli) (2.22)\n",
            "Installing collected packages: pyxdg, sentry-sdk, requests-toolbelt, django-s3-file-field-client, retryable-requests, isic-metadata, authlib, girder-cli-oauth-client, isic-cli\n",
            "Successfully installed authlib-1.3.0 django-s3-file-field-client-1.0.1 girder-cli-oauth-client-0.4.0 isic-cli-10.0.0 isic-metadata-1.5.0 pyxdg-0.28 requests-toolbelt-1.0.0 retryable-requests-0.1.2 sentry-sdk-1.45.0\n",
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.10/dist-packages (1.5.16)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.10/dist-packages (from kaggle) (1.16.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from kaggle) (2024.2.2)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.31.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from kaggle) (4.66.2)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.10/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.0.7)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from kaggle) (6.1.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->kaggle) (0.5.1)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.10/dist-packages (from python-slugify->kaggle) (1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.7)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.4.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install tensorflow\n",
        "!pip install isic-cli\n",
        "!pip install kaggle\n",
        "!pip install scikit-learn\n",
        "# !pip install imblearn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "1xCJYfs1lJSM"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import random\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import sklearn.utils.class_weight\n",
        "from pathlib import Path\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.applications import DenseNet169\n",
        "from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, BatchNormalization, Activation\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "_f_cBi7P0Ohg"
      },
      "outputs": [],
      "source": [
        "# import random\n",
        "# import numpy as np\n",
        "# import tensorflow as tf\n",
        "\n",
        "# Set random seeds for Python's built-in random number generator\n",
        "random.seed(42)\n",
        "\n",
        "# Set random seeds for NumPy's random number generator\n",
        "np.random.seed(42)\n",
        "\n",
        "# Set random seeds for TensorFlow's random number generator\n",
        "tf.random.set_seed(42)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "GxvlgkCfxBCt"
      },
      "outputs": [],
      "source": [
        "# import os\n",
        "# Specify the current path of kaggle.json file\n",
        "current_path = '/content/kaggle.json'\n",
        "\n",
        "# Desired path where the Kaggle API expects the kaggle.json file\n",
        "desired_path = '/root/.kaggle/kaggle.json'\n",
        "\n",
        "if os.path.exists(current_path):\n",
        "    os.makedirs(os.path.dirname(desired_path), exist_ok=True)\n",
        "    os.rename(current_path, desired_path)\n",
        "\n",
        "    # Set the file's permissions to avoid a permissions error\n",
        "    os.chmod(desired_path, 0o600)\n",
        "else:\n",
        "    print(f\"Error: '{current_path}' does not exist. Please upload the file.\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IoTv5dsWyy-Y",
        "outputId": "3979e5f4-3c0e-46ee-e27d-67e0e222e19e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "visit the following url in a browser:\n",
            "https://api.isic-archive.com/oauth/authorize?response_type=code&client_id=RpCzc4hFjv5gOJdM2DM2nBdokOviOh5ne63Tpn7Q&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&state=5eaylaPtiibui424RKbdX2FRy0x0B0&code_challenge=yi9L9fPJn9zZFvcOSMhG4IQB2bK-FOaSNMYi6_bosvc&code_challenge_method=S256\n",
            "enter the code shown in your browser: diEMvqk01drc0DL14WovdAM7OMAcC8\n",
            "Success!\n"
          ]
        }
      ],
      "source": [
        "! isic user login"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "paYP8o0OzMYW",
        "outputId": "1e5bda84-f74a-4556-eb36-5b773d0b73b7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading isic-2019.zip to /content\n",
            "100% 9.09G/9.10G [05:15<00:00, 40.7MB/s]\n",
            "100% 9.10G/9.10G [05:15<00:00, 30.9MB/s]\n"
          ]
        }
      ],
      "source": [
        "!kaggle datasets download -d andrewmvd/isic-2019\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "XlWuOA7dyxnf"
      },
      "outputs": [],
      "source": [
        "!unzip -q isic-2019.zip\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GpDKK-4g-pmT"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "syYN2NBYmU8A"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IqGun8pV0Ni4"
      },
      "source": [
        "https://www.nature.com/articles/s41598-021-96707-8"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DuhvQbmUz9hR"
      },
      "source": [
        "get the data over here"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e1pVsmdNz-Gf"
      },
      "source": [
        "run all the same cells and augment by resampling the data like we did in model 1\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pwcebCBWwaXO",
        "outputId": "696f8e9a-1ee5-42e0-f0c2-5d41ba60f3da"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-f2732889fb40>:1: DtypeWarning: Columns (8,11,15,16,17) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  metadata = pd.read_csv('/content/challenge-2019-training_metadata_2024-04-17.csv')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          image                                         image_path\n",
            "0  ISIC_0000000  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
            "1  ISIC_0000000  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
            "2  ISIC_0000000  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
            "3  ISIC_0000000  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
            "4  ISIC_0000001  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n"
          ]
        }
      ],
      "source": [
        "metadata = pd.read_csv('/content/challenge-2019-training_metadata_2024-04-17.csv')\n",
        "metadata.rename(columns={'isic_id': 'image'}, inplace=True)\n",
        "\n",
        "# Define the new base path for the images\n",
        "base_path = Path('/content/ISIC_2019_Training_Input/ISIC_2019_Training_Input')\n",
        "\n",
        "# Create the full image paths\n",
        "metadata['image_path'] = metadata['image'].apply(lambda x: base_path / f\"{x}.jpg\")\n",
        "\n",
        "# Example of how to display the first few image paths\n",
        "print(metadata[['image', 'image_path']].head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6iphhoJFk9Wr",
        "outputId": "719ceed9-523a-457f-b855-7b065ed8cb91"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
              "1    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
              "2    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
              "3    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
              "4    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
              "Name: image_path, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "metadata['image_path'].head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "QqqrGaMjk5s5",
        "outputId": "2b971e00-6f12-4386-a891-c1a04b184dea"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           image  age_approx anatom_site_general benign_malignant  \\\n",
              "0   ISIC_0000000        55.0      anterior torso           benign   \n",
              "4   ISIC_0000001        30.0      anterior torso           benign   \n",
              "8   ISIC_0000002        60.0     upper extremity        malignant   \n",
              "12  ISIC_0000003        30.0     upper extremity           benign   \n",
              "16  ISIC_0000004        80.0     posterior torso        malignant   \n",
              "\n",
              "    clin_size_long_diam_mm  concomitant_biopsy dermoscopic_type diagnosis  \\\n",
              "0                      NaN               False              NaN     nevus   \n",
              "4                      NaN               False              NaN     nevus   \n",
              "8                      NaN                True              NaN  melanoma   \n",
              "12                     NaN               False              NaN     nevus   \n",
              "16                     NaN                True              NaN  melanoma   \n",
              "\n",
              "   diagnosis_confirm_type family_hx_mm   image_type lesion_id  melanocytic  \\\n",
              "0                     NaN          NaN  dermoscopic       NaN         True   \n",
              "4                     NaN          NaN  dermoscopic       NaN         True   \n",
              "8          histopathology          NaN  dermoscopic       NaN         True   \n",
              "12                    NaN          NaN  dermoscopic       NaN         True   \n",
              "16         histopathology          NaN  dermoscopic       NaN         True   \n",
              "\n",
              "   nevus_type patient_id personal_hx_mm     sex  \\\n",
              "0         NaN        NaN            NaN  female   \n",
              "4         NaN        NaN            NaN  female   \n",
              "8         NaN        NaN            NaN  female   \n",
              "12        NaN        NaN            NaN    male   \n",
              "16        NaN        NaN            NaN    male   \n",
              "\n",
              "                                           image_path  \n",
              "0   /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  \n",
              "4   /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  \n",
              "8   /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  \n",
              "12  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  \n",
              "16  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-007da362-ae3d-4403-9045-a5adc0f06a9e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>image</th>\n",
              "      <th>age_approx</th>\n",
              "      <th>anatom_site_general</th>\n",
              "      <th>benign_malignant</th>\n",
              "      <th>clin_size_long_diam_mm</th>\n",
              "      <th>concomitant_biopsy</th>\n",
              "      <th>dermoscopic_type</th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>diagnosis_confirm_type</th>\n",
              "      <th>family_hx_mm</th>\n",
              "      <th>image_type</th>\n",
              "      <th>lesion_id</th>\n",
              "      <th>melanocytic</th>\n",
              "      <th>nevus_type</th>\n",
              "      <th>patient_id</th>\n",
              "      <th>personal_hx_mm</th>\n",
              "      <th>sex</th>\n",
              "      <th>image_path</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ISIC_0000000</td>\n",
              "      <td>55.0</td>\n",
              "      <td>anterior torso</td>\n",
              "      <td>benign</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>nevus</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ISIC_0000001</td>\n",
              "      <td>30.0</td>\n",
              "      <td>anterior torso</td>\n",
              "      <td>benign</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>nevus</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>ISIC_0000002</td>\n",
              "      <td>60.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>malignant</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>histopathology</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>ISIC_0000003</td>\n",
              "      <td>30.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>benign</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>nevus</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>male</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>ISIC_0000004</td>\n",
              "      <td>80.0</td>\n",
              "      <td>posterior torso</td>\n",
              "      <td>malignant</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>histopathology</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>male</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-007da362-ae3d-4403-9045-a5adc0f06a9e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-007da362-ae3d-4403-9045-a5adc0f06a9e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-007da362-ae3d-4403-9045-a5adc0f06a9e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f2cc010d-8b5e-4fb0-a6e7-a62a35d5c3e2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2cc010d-8b5e-4fb0-a6e7-a62a35d5c3e2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f2cc010d-8b5e-4fb0-a6e7-a62a35d5c3e2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "metadata",
              "summary": "{\n  \"name\": \"metadata\",\n  \"rows\": 25331,\n  \"fields\": [\n    {\n      \"column\": \"image\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25331,\n        \"samples\": [\n          \"ISIC_0000360\",\n          \"ISIC_0031596\",\n          \"ISIC_0069981\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age_approx\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.00087247488851,\n        \"min\": 0.0,\n        \"max\": 85.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          55.0,\n          30.0,\n          70.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anatom_site_general\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"upper extremity\",\n          \"head/neck\",\n          \"anterior torso\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"benign_malignant\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"malignant\",\n          \"indeterminate\",\n          \"benign\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clin_size_long_diam_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.282206031940937,\n        \"min\": 1.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          1.5,\n          14.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"concomitant_biopsy\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dermoscopic_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"contact non-polarized\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diagnosis\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"actinic keratosis\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diagnosis_confirm_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"single image expert consensus\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_hx_mm\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"dermoscopic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lesion_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12264,\n        \"samples\": [\n          \"IL_8887321\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"melanocytic\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nevus_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"combined\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"patient_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 369,\n        \"samples\": [\n          \"IP_3476647\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"personal_hx_mm\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25331,\n        \"samples\": [\n          \"/content/ISIC_2019_Training_Input/ISIC_2019_Training_Input/ISIC_0000360.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "# Drop the specified columns\n",
        "metadata.drop(columns=['copyright_license', 'attribution'], inplace=True)\n",
        "# Rename the column\n",
        "metadata.rename(columns={'isic_id': 'image'}, inplace=True)\n",
        "metadata.drop_duplicates(inplace=True)\n",
        "metadata.head()"
      ]
    },
    {
      "source": [
        "# @title benign_malignant\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "metadata.groupby('benign_malignant').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ],
      "cell_type": "code",
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "hknz9I9ZM67Z",
        "outputId": "10bb399a-a571-4cdb-f987-631a235782d4"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8BswcVcfLiN0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DxbVwxRVql3_",
        "outputId": "f2442206-8d1f-4a77-b38b-80672ddedc5a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(25331, 18)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "metadata.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A37LAOZzivsX",
        "outputId": "c3554cc7-fabc-49b5-c4b3-7bf7f166056d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(25331, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "# Load the data from the file into a DataFrame\n",
        "ground_truth = pd.read_csv('/content/ISIC_2019_Training_GroundTruth.csv')\n",
        "\n",
        "# Display the first few rows of the DataFrame\n",
        "ground_truth.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XupShyTeivvo",
        "outputId": "4a332988-6be0-4958-b7a6-c65b1804aa28"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(25331, 28)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "image_dir = Path('/content/ISIC_2019_Training_Input/ISIC_2019_Training_Input')\n",
        "ground_truth['image_path'] = ground_truth['image'].apply(lambda x: image_dir / f\"{x}.jpg\")\n",
        "\n",
        "# Merge the ground_truth with metadata if necessary\n",
        "full_metadata = pd.merge(ground_truth, metadata, on='image', how='left')  # Adjust 'on' parameter as needed\n",
        "full_metadata.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "38heHOuDi6WW",
        "outputId": "c961c356-afa0-4365-f1cb-e0499f7bf776"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
            "1    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
            "2    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
            "3    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
            "4    /content/ISIC_2019_Training_Input/ISIC_2019_Tr...\n",
            "Name: image_path, dtype: object\n"
          ]
        }
      ],
      "source": [
        "# Correct the base path in 'image_path' column\n",
        "correct_base_path = \"/content/ISIC_2019_Training_Input/ISIC_2019_Training_Input\"\n",
        "\n",
        "full_metadata['image_path'] = full_metadata['image'].apply(lambda x: f\"{correct_base_path}/{x}.jpg\")\n",
        "\n",
        "# Verify the correction by printing the first few entries again\n",
        "print(full_metadata['image_path'].head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oeB7Xwiui6Y3",
        "outputId": "5ca48fad-0b80-4487-d512-a2ca38e6faeb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 25331 entries, 0 to 25330\n",
            "Data columns (total 29 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   image                   25331 non-null  object \n",
            " 1   MEL                     25331 non-null  float64\n",
            " 2   NV                      25331 non-null  float64\n",
            " 3   BCC                     25331 non-null  float64\n",
            " 4   AK                      25331 non-null  float64\n",
            " 5   BKL                     25331 non-null  float64\n",
            " 6   DF                      25331 non-null  float64\n",
            " 7   VASC                    25331 non-null  float64\n",
            " 8   SCC                     25331 non-null  float64\n",
            " 9   UNK                     25331 non-null  float64\n",
            " 10  image_path_x            25331 non-null  object \n",
            " 11  age_approx              22989 non-null  float64\n",
            " 12  anatom_site_general     21374 non-null  object \n",
            " 13  benign_malignant        15710 non-null  object \n",
            " 14  clin_size_long_diam_mm  556 non-null    float64\n",
            " 15  concomitant_biopsy      23257 non-null  object \n",
            " 16  dermoscopic_type        3 non-null      object \n",
            " 17  diagnosis               23257 non-null  object \n",
            " 18  diagnosis_confirm_type  20961 non-null  object \n",
            " 19  family_hx_mm            545 non-null    object \n",
            " 20  image_type              23257 non-null  object \n",
            " 21  lesion_id               22431 non-null  object \n",
            " 22  melanocytic             23257 non-null  object \n",
            " 23  nevus_type              0 non-null      object \n",
            " 24  patient_id              0 non-null      object \n",
            " 25  personal_hx_mm          555 non-null    object \n",
            " 26  sex                     23053 non-null  object \n",
            " 27  image_path_y            23257 non-null  object \n",
            " 28  image_path              25331 non-null  object \n",
            "dtypes: float64(11), object(18)\n",
            "memory usage: 5.6+ MB\n"
          ]
        }
      ],
      "source": [
        "full_metadata.info()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "full_metadata.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "1_XO4zbaOlpW",
        "outputId": "0f1ef0f3-47c4-4f6d-f9ec-4d03d305ae1e"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  UNK  ...  \\\n",
              "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "\n",
              "  family_hx_mm   image_type lesion_id melanocytic  nevus_type patient_id  \\\n",
              "0          NaN  dermoscopic       NaN        True         NaN        NaN   \n",
              "1          NaN  dermoscopic       NaN        True         NaN        NaN   \n",
              "2          NaN  dermoscopic       NaN        True         NaN        NaN   \n",
              "3          NaN  dermoscopic       NaN        True         NaN        NaN   \n",
              "4          NaN  dermoscopic       NaN        True         NaN        NaN   \n",
              "\n",
              "  personal_hx_mm     sex                                       image_path_y  \\\n",
              "0            NaN  female  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
              "1            NaN  female  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
              "2            NaN  female  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
              "3            NaN    male  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
              "4            NaN    male  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
              "\n",
              "                                          image_path  \n",
              "0  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  \n",
              "1  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  \n",
              "2  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  \n",
              "3  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  \n",
              "4  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...  \n",
              "\n",
              "[5 rows x 29 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fec0f8d1-6049-4389-9bc8-6b42eab08b47\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>image</th>\n",
              "      <th>MEL</th>\n",
              "      <th>NV</th>\n",
              "      <th>BCC</th>\n",
              "      <th>AK</th>\n",
              "      <th>BKL</th>\n",
              "      <th>DF</th>\n",
              "      <th>VASC</th>\n",
              "      <th>SCC</th>\n",
              "      <th>UNK</th>\n",
              "      <th>...</th>\n",
              "      <th>family_hx_mm</th>\n",
              "      <th>image_type</th>\n",
              "      <th>lesion_id</th>\n",
              "      <th>melanocytic</th>\n",
              "      <th>nevus_type</th>\n",
              "      <th>patient_id</th>\n",
              "      <th>personal_hx_mm</th>\n",
              "      <th>sex</th>\n",
              "      <th>image_path_y</th>\n",
              "      <th>image_path</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ISIC_0000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ISIC_0000001</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ISIC_0000002</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ISIC_0000003</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>male</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ISIC_0000004</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>NaN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>male</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "      <td>/content/ISIC_2019_Training_Input/ISIC_2019_Tr...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 29 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fec0f8d1-6049-4389-9bc8-6b42eab08b47')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fec0f8d1-6049-4389-9bc8-6b42eab08b47 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fec0f8d1-6049-4389-9bc8-6b42eab08b47');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2568116c-d1fc-4065-bc07-c54b90e08d72\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2568116c-d1fc-4065-bc07-c54b90e08d72')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2568116c-d1fc-4065-bc07-c54b90e08d72 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "full_metadata"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vH7hMDOYi6a_",
        "outputId": "9f5f41a2-34e6-4c82-cb95-7c6dc2adc524"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 25331 entries, 0 to 25330\n",
            "Data columns (total 29 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   image                   25331 non-null  object \n",
            " 1   MEL                     25331 non-null  float64\n",
            " 2   NV                      25331 non-null  float64\n",
            " 3   BCC                     25331 non-null  float64\n",
            " 4   AK                      25331 non-null  float64\n",
            " 5   BKL                     25331 non-null  float64\n",
            " 6   DF                      25331 non-null  float64\n",
            " 7   VASC                    25331 non-null  float64\n",
            " 8   SCC                     25331 non-null  float64\n",
            " 9   UNK                     25331 non-null  float64\n",
            " 10  image_path_x            25331 non-null  object \n",
            " 11  age_approx              25331 non-null  float64\n",
            " 12  anatom_site_general     25331 non-null  object \n",
            " 13  benign_malignant        15710 non-null  object \n",
            " 14  clin_size_long_diam_mm  556 non-null    float64\n",
            " 15  concomitant_biopsy      23257 non-null  object \n",
            " 16  dermoscopic_type        3 non-null      object \n",
            " 17  diagnosis               23257 non-null  object \n",
            " 18  diagnosis_confirm_type  20961 non-null  object \n",
            " 19  family_hx_mm            545 non-null    object \n",
            " 20  image_type              23257 non-null  object \n",
            " 21  lesion_id               22431 non-null  object \n",
            " 22  melanocytic             23257 non-null  object \n",
            " 23  nevus_type              0 non-null      object \n",
            " 24  patient_id              0 non-null      object \n",
            " 25  personal_hx_mm          555 non-null    object \n",
            " 26  sex                     25331 non-null  object \n",
            " 27  image_path_y            23257 non-null  object \n",
            " 28  image_path              25331 non-null  object \n",
            "dtypes: float64(11), object(18)\n",
            "memory usage: 5.6+ MB\n"
          ]
        }
      ],
      "source": [
        "# Fill missing values for 'age_approx' with its median\n",
        "full_metadata['age_approx'].fillna(full_metadata['age_approx'].median(), inplace=True)\n",
        "\n",
        "# For categorical data, fill missing values with 'unknown'\n",
        "full_metadata['anatom_site_general'].fillna('unknown', inplace=True)\n",
        "full_metadata['sex'].fillna('unknown', inplace=True)\n",
        "full_metadata.info()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "URVbiXPVjGoE",
        "outputId": "1350d24b-f655-4955-80a4-a6ea6eaea418"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of discrepancies: 25331\n",
            "Discrepancy report:\n",
            "                                            image_path_x  \\\n",
            "0      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "1      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "2      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "3      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "4      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "...                                                  ...   \n",
            "25326  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "25327  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "25328  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "25329  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "25330  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "\n",
            "                                            image_path_y  \\\n",
            "0      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "1      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "2      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "3      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "4      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "...                                                  ...   \n",
            "25326  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "25327  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "25328  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "25329  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "25330  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "\n",
            "                                              image_path consolidated_path  \n",
            "0      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "1      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "2      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "3      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "4      /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "...                                                  ...               ...  \n",
            "25326  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "25327  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "25328  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "25329  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "25330  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...              None  \n",
            "\n",
            "[25331 rows x 4 columns]\n"
          ]
        }
      ],
      "source": [
        "# Sample DataFrame\n",
        "data = {\n",
        "    'image_path_x': ['path1.jpg', 'path2.jpg', 'path3.jpg'],\n",
        "    'image_path_y': ['path1.jpg', 'path2.jpg', 'path3.jpg'],\n",
        "    'image_path': ['path1.jpg', 'path2.jpg', 'path4.jpg']  # Notice the discrepancy in the last row\n",
        "}\n",
        "df = full_metadata\n",
        "\n",
        "# Step 1: Consolidate columns into one\n",
        "df['consolidated_path'] = df.apply(lambda x: x.dropna().unique()[0] if len(x.dropna().unique()) == 1 else None, axis=1)\n",
        "\n",
        "# Step 2: Identify discrepancies\n",
        "df['is_discrepant'] = df.apply(lambda x: len(x.dropna().unique()) != 1, axis=1)\n",
        "\n",
        "# Step 3: Count discrepancies\n",
        "discrepancy_count = df['is_discrepant'].sum()\n",
        "\n",
        "# Step 4: Report discrepancies\n",
        "discrepancy_report = df[df['is_discrepant']]\n",
        "\n",
        "print(\"Number of discrepancies:\", discrepancy_count)\n",
        "print(\"Discrepancy report:\")\n",
        "print(discrepancy_report[['image_path_x', 'image_path_y', 'image_path', 'consolidated_path']])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XRB72bTcjGrp",
        "outputId": "0f98d1f7-d6da-44d9-e4cd-777c011fdc61"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Detailed discrepancies (first 10 cases focusing on path endings):\n",
            "                                         image_path_x image_path_y  \\\n",
            "16  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "17  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "18  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "19  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "20  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "21  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "22  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "23  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "24  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "25  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...          NaN   \n",
            "\n",
            "                                           image_path  \\\n",
            "16  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "17  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "18  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "19  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "20  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "21  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "22  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "23  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "24  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "25  /content/ISIC_2019_Training_Input/ISIC_2019_Tr...   \n",
            "\n",
            "                                  discrepancy_details  \n",
            "16  X vs Y: t/ISIC_0000017_downsampled.jpg != nan,...  \n",
            "17  X vs Y: t/ISIC_0000018_downsampled.jpg != nan,...  \n",
            "18  X vs Y: t/ISIC_0000019_downsampled.jpg != nan,...  \n",
            "19  X vs Y: t/ISIC_0000020_downsampled.jpg != nan,...  \n",
            "20  X vs Y: t/ISIC_0000021_downsampled.jpg != nan,...  \n",
            "21  X vs Y: t/ISIC_0000022_downsampled.jpg != nan,...  \n",
            "22  X vs Y: t/ISIC_0000023_downsampled.jpg != nan,...  \n",
            "23  X vs Y: t/ISIC_0000024_downsampled.jpg != nan,...  \n",
            "24  X vs Y: t/ISIC_0000025_downsampled.jpg != nan,...  \n",
            "25  X vs Y: t/ISIC_0000026_downsampled.jpg != nan,...  \n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Define a function to convert PosixPath to string and extract the last part of the paths\n",
        "def detail_discrepancies(row):\n",
        "    # Convert PosixPath to string and then get the last 30 characters of each path\n",
        "    x_end = str(row['image_path_x'])[-30:]\n",
        "    y_end = str(row['image_path_y'])[-30:]\n",
        "    path_end = str(row['image_path'])[-30:]\n",
        "\n",
        "    if x_end != y_end or x_end != path_end:\n",
        "        return f\"X vs Y: {x_end} != {y_end}, X vs Path: {x_end} != {path_end}\"\n",
        "    return None\n",
        "\n",
        "# Apply this function to a new column\n",
        "full_metadata['discrepancy_details'] = full_metadata.apply(detail_discrepancies, axis=1)\n",
        "\n",
        "# Filter to show only rows with discrepancies and limit the output\n",
        "discrepancy_details = full_metadata[full_metadata['discrepancy_details'].notna()].head(10)\n",
        "\n",
        "print(\"Detailed discrepancies (first 10 cases focusing on path endings):\")\n",
        "print(discrepancy_details[['image_path_x', 'image_path_y', 'image_path', 'discrepancy_details']])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "wcLTqk6yi6dV"
      },
      "outputs": [],
      "source": [
        "full_metadata = pd.get_dummies(full_metadata, columns=['anatom_site_general','benign_malignant', 'sex'])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "sv3AQBtei6fX",
        "outputId": "0fcfb3c0-a965-418a-9a92-160f50809c2a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "One-hot encoded columns for 'anatom_site_general':\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          image  MEL   NV  BCC   AK  BKL   DF  VASC  SCC  UNK  ...  \\\n",
              "0  ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "1  ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "2  ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "3  ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "4  ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0  ...   \n",
              "\n",
              "  anatom_site_general_palms/soles  anatom_site_general_posterior torso  \\\n",
              "0                           False                                False   \n",
              "1                           False                                False   \n",
              "2                           False                                False   \n",
              "3                           False                                False   \n",
              "4                           False                                 True   \n",
              "\n",
              "   anatom_site_general_unknown anatom_site_general_upper extremity  \\\n",
              "0                        False                               False   \n",
              "1                        False                               False   \n",
              "2                        False                                True   \n",
              "3                        False                                True   \n",
              "4                        False                               False   \n",
              "\n",
              "  benign_malignant_benign benign_malignant_indeterminate/benign  \\\n",
              "0                    True                                 False   \n",
              "1                    True                                 False   \n",
              "2                   False                                 False   \n",
              "3                    True                                 False   \n",
              "4                   False                                 False   \n",
              "\n",
              "  benign_malignant_malignant sex_female sex_male sex_unknown  \n",
              "0                      False       True    False       False  \n",
              "1                      False       True    False       False  \n",
              "2                       True       True    False       False  \n",
              "3                      False      False     True       False  \n",
              "4                       True      False     True       False  \n",
              "\n",
              "[5 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ba713d78-ef43-4f51-a3b3-3fc1581e31e1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>image</th>\n",
              "      <th>MEL</th>\n",
              "      <th>NV</th>\n",
              "      <th>BCC</th>\n",
              "      <th>AK</th>\n",
              "      <th>BKL</th>\n",
              "      <th>DF</th>\n",
              "      <th>VASC</th>\n",
              "      <th>SCC</th>\n",
              "      <th>UNK</th>\n",
              "      <th>...</th>\n",
              "      <th>anatom_site_general_palms/soles</th>\n",
              "      <th>anatom_site_general_posterior torso</th>\n",
              "      <th>anatom_site_general_unknown</th>\n",
              "      <th>anatom_site_general_upper extremity</th>\n",
              "      <th>benign_malignant_benign</th>\n",
              "      <th>benign_malignant_indeterminate/benign</th>\n",
              "      <th>benign_malignant_malignant</th>\n",
              "      <th>sex_female</th>\n",
              "      <th>sex_male</th>\n",
              "      <th>sex_unknown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ISIC_0000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ISIC_0000001</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ISIC_0000002</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ISIC_0000003</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ISIC_0000004</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba713d78-ef43-4f51-a3b3-3fc1581e31e1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ba713d78-ef43-4f51-a3b3-3fc1581e31e1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ba713d78-ef43-4f51-a3b3-3fc1581e31e1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-44a9253f-9f7b-4df2-b3eb-0268b61f47db\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-44a9253f-9f7b-4df2-b3eb-0268b61f47db')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-44a9253f-9f7b-4df2-b3eb-0268b61f47db button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "full_metadata"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "anatom_site_columns = [col for col in full_metadata.columns if col.startswith('anatom_site_general_')]\n",
        "#benign_malignant_columns = [col for col in full_metadata.columns if col.startswith('benign_malignant_')]\n",
        "\n",
        "print(\"One-hot encoded columns for 'anatom_site_general':\")\n",
        "full_metadata.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rdJm9djcAJgQ",
        "outputId": "bc3f4d95-9993-4ed3-b0a8-36a63f6fc1d6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   benign  malignant\n",
            "0    True      False\n",
            "1    True      False\n",
            "2   False       True\n",
            "3    True      False\n",
            "4   False       True\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 25331 entries, 0 to 25330\n",
            "Data columns (total 43 columns):\n",
            " #   Column                               Non-Null Count  Dtype  \n",
            "---  ------                               --------------  -----  \n",
            " 0   image                                25331 non-null  object \n",
            " 1   MEL                                  25331 non-null  float64\n",
            " 2   NV                                   25331 non-null  float64\n",
            " 3   BCC                                  25331 non-null  float64\n",
            " 4   AK                                   25331 non-null  float64\n",
            " 5   BKL                                  25331 non-null  float64\n",
            " 6   DF                                   25331 non-null  float64\n",
            " 7   VASC                                 25331 non-null  float64\n",
            " 8   SCC                                  25331 non-null  float64\n",
            " 9   UNK                                  25331 non-null  float64\n",
            " 10  image_path_x                         25331 non-null  object \n",
            " 11  age_approx                           25331 non-null  float64\n",
            " 12  clin_size_long_diam_mm               556 non-null    float64\n",
            " 13  concomitant_biopsy                   23257 non-null  object \n",
            " 14  dermoscopic_type                     3 non-null      object \n",
            " 15  diagnosis                            23257 non-null  object \n",
            " 16  diagnosis_confirm_type               20961 non-null  object \n",
            " 17  family_hx_mm                         545 non-null    object \n",
            " 18  image_type                           23257 non-null  object \n",
            " 19  lesion_id                            22431 non-null  object \n",
            " 20  melanocytic                          23257 non-null  object \n",
            " 21  nevus_type                           0 non-null      object \n",
            " 22  patient_id                           0 non-null      object \n",
            " 23  personal_hx_mm                       555 non-null    object \n",
            " 24  image_path_y                         23257 non-null  object \n",
            " 25  image_path                           25331 non-null  object \n",
            " 26  consolidated_path                    0 non-null      object \n",
            " 27  is_discrepant                        25331 non-null  bool   \n",
            " 28  discrepancy_details                  2074 non-null   object \n",
            " 29  anatom_site_general_anterior torso   25331 non-null  bool   \n",
            " 30  anatom_site_general_head/neck        25331 non-null  bool   \n",
            " 31  anatom_site_general_lateral torso    25331 non-null  bool   \n",
            " 32  anatom_site_general_lower extremity  25331 non-null  bool   \n",
            " 33  anatom_site_general_oral/genital     25331 non-null  bool   \n",
            " 34  anatom_site_general_palms/soles      25331 non-null  bool   \n",
            " 35  anatom_site_general_posterior torso  25331 non-null  bool   \n",
            " 36  anatom_site_general_unknown          25331 non-null  bool   \n",
            " 37  anatom_site_general_upper extremity  25331 non-null  bool   \n",
            " 38  benign                               25331 non-null  bool   \n",
            " 39  malignant                            25331 non-null  bool   \n",
            " 40  sex_female                           25331 non-null  bool   \n",
            " 41  sex_male                             25331 non-null  bool   \n",
            " 42  sex_unknown                          25331 non-null  bool   \n",
            "dtypes: bool(15), float64(11), object(17)\n",
            "memory usage: 5.8+ MB\n"
          ]
        }
      ],
      "source": [
        "# Rename the one-hot encoded 'benign_malignant' columns\n",
        "full_metadata.rename(columns={\n",
        "     'benign_malignant_benign': 'benign',\n",
        "     'benign_malignant_indeterminate/benign': 'indeterminate_benign',\n",
        "     'benign_malignant_malignant': 'malignant'\n",
        " }, inplace=True)\n",
        "\n",
        "# Sum the 'indeterminate_benign' and 'malignant' columns to create a single 'malignant' column\n",
        "full_metadata['malignant'] = full_metadata['indeterminate_benign'] + full_metadata['malignant']\n",
        "\n",
        "# Convert any values greater than 1 back to 1 (if there's any overlapping)\n",
        "full_metadata['malignant'] = full_metadata['malignant'].clip(upper=1)\n",
        "\n",
        "# Drop the now unnecessary 'indeterminate_benign' column as it has been merged into 'malignant'\n",
        "full_metadata.drop(columns='indeterminate_benign', inplace=True)\n",
        "\n",
        "# Verify the changes\n",
        "print(full_metadata[['benign', 'malignant']].head())\n",
        "full_metadata.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wLhvrwK8DRjv",
        "outputId": "cd2aece5-6f1c-4e57-cb3e-6270d17d04c2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              MEL   NV  BCC   AK  BKL   DF  VASC  SCC  UNK  age_approx  ...  \\\n",
            "image                                                                   ...   \n",
            "ISIC_0000000  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0        55.0  ...   \n",
            "ISIC_0000001  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0        30.0  ...   \n",
            "ISIC_0000002  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0        60.0  ...   \n",
            "ISIC_0000003  0.0  1.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0        30.0  ...   \n",
            "ISIC_0000004  1.0  0.0  0.0  0.0  0.0  0.0   0.0  0.0  0.0        80.0  ...   \n",
            "\n",
            "              anatom_site_general_oral/genital  \\\n",
            "image                                            \n",
            "ISIC_0000000                                 0   \n",
            "ISIC_0000001                                 0   \n",
            "ISIC_0000002                                 0   \n",
            "ISIC_0000003                                 0   \n",
            "ISIC_0000004                                 0   \n",
            "\n",
            "              anatom_site_general_palms/soles  \\\n",
            "image                                           \n",
            "ISIC_0000000                                0   \n",
            "ISIC_0000001                                0   \n",
            "ISIC_0000002                                0   \n",
            "ISIC_0000003                                0   \n",
            "ISIC_0000004                                0   \n",
            "\n",
            "              anatom_site_general_posterior torso  \\\n",
            "image                                               \n",
            "ISIC_0000000                                    0   \n",
            "ISIC_0000001                                    0   \n",
            "ISIC_0000002                                    0   \n",
            "ISIC_0000003                                    0   \n",
            "ISIC_0000004                                    1   \n",
            "\n",
            "              anatom_site_general_unknown  \\\n",
            "image                                       \n",
            "ISIC_0000000                            0   \n",
            "ISIC_0000001                            0   \n",
            "ISIC_0000002                            0   \n",
            "ISIC_0000003                            0   \n",
            "ISIC_0000004                            0   \n",
            "\n",
            "              anatom_site_general_upper extremity benign  malignant  \\\n",
            "image                                                                 \n",
            "ISIC_0000000                                    0      1          0   \n",
            "ISIC_0000001                                    0      1          0   \n",
            "ISIC_0000002                                    1      0          1   \n",
            "ISIC_0000003                                    1      1          0   \n",
            "ISIC_0000004                                    0      0          1   \n",
            "\n",
            "              sex_female  sex_male  sex_unknown  \n",
            "image                                            \n",
            "ISIC_0000000           1         0            0  \n",
            "ISIC_0000001           1         0            0  \n",
            "ISIC_0000002           1         0            0  \n",
            "ISIC_0000003           0         1            0  \n",
            "ISIC_0000004           0         1            0  \n",
            "\n",
            "[5 rows x 33 columns]\n"
          ]
        }
      ],
      "source": [
        "# Replace True and False with 1 and 0 respectively\n",
        "full_metadata.replace({True: 1, False: 0}, inplace=True)\n",
        "\n",
        "# Drop the specified columns\n",
        "columns_to_drop = ['diagnosis', 'nevus_type','patient_id', 'dermoscopic_type', 'diagnosis_confirm_type', 'image_type', 'image_path_x', 'image_path_y', 'lesion_id']\n",
        "full_metadata.drop(columns_to_drop, axis=1, inplace=True)\n",
        "\n",
        "# Perform Label Encoding for the specified columns\n",
        "label_encoder = LabelEncoder()\n",
        "for column in ['concomitant_biopsy', 'family_hx_mm', 'melanocytic', 'personal_hx_mm', 'discrepancy_details', 'consolidated_path']:\n",
        "    full_metadata[column] = label_encoder.fit_transform(full_metadata[column])\n",
        "\n",
        "full_metadata = full_metadata.set_index('image')\n",
        "\n",
        "# Displaying the modified DataFrame\n",
        "print(full_metadata.head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "12m0q_FkDVSt",
        "outputId": "7938f5b9-0d15-4214-9765-53eff1880237"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 25331 entries, ISIC_0000000 to ISIC_0073254\n",
            "Data columns (total 33 columns):\n",
            " #   Column                               Non-Null Count  Dtype  \n",
            "---  ------                               --------------  -----  \n",
            " 0   MEL                                  25331 non-null  float64\n",
            " 1   NV                                   25331 non-null  float64\n",
            " 2   BCC                                  25331 non-null  float64\n",
            " 3   AK                                   25331 non-null  float64\n",
            " 4   BKL                                  25331 non-null  float64\n",
            " 5   DF                                   25331 non-null  float64\n",
            " 6   VASC                                 25331 non-null  float64\n",
            " 7   SCC                                  25331 non-null  float64\n",
            " 8   UNK                                  25331 non-null  float64\n",
            " 9   age_approx                           25331 non-null  int64  \n",
            " 10  clin_size_long_diam_mm               556 non-null    float64\n",
            " 11  concomitant_biopsy                   25331 non-null  int64  \n",
            " 12  family_hx_mm                         25331 non-null  int64  \n",
            " 13  melanocytic                          25331 non-null  int64  \n",
            " 14  personal_hx_mm                       25331 non-null  int64  \n",
            " 15  image_path                           25331 non-null  object \n",
            " 16  consolidated_path                    25331 non-null  int64  \n",
            " 17  is_discrepant                        25331 non-null  int64  \n",
            " 18  discrepancy_details                  25331 non-null  int64  \n",
            " 19  anatom_site_general_anterior torso   25331 non-null  int64  \n",
            " 20  anatom_site_general_head/neck        25331 non-null  int64  \n",
            " 21  anatom_site_general_lateral torso    25331 non-null  int64  \n",
            " 22  anatom_site_general_lower extremity  25331 non-null  int64  \n",
            " 23  anatom_site_general_oral/genital     25331 non-null  int64  \n",
            " 24  anatom_site_general_palms/soles      25331 non-null  int64  \n",
            " 25  anatom_site_general_posterior torso  25331 non-null  int64  \n",
            " 26  anatom_site_general_unknown          25331 non-null  int64  \n",
            " 27  anatom_site_general_upper extremity  25331 non-null  int64  \n",
            " 28  benign                               25331 non-null  int64  \n",
            " 29  malignant                            25331 non-null  int64  \n",
            " 30  sex_female                           25331 non-null  int64  \n",
            " 31  sex_male                             25331 non-null  int64  \n",
            " 32  sex_unknown                          25331 non-null  int64  \n",
            "dtypes: float64(10), int64(22), object(1)\n",
            "memory usage: 6.6+ MB\n"
          ]
        }
      ],
      "source": [
        "label_encoder = LabelEncoder()\n",
        "for column in ['age_approx']:\n",
        "    full_metadata[column] = label_encoder.fit_transform(full_metadata[column])\n",
        "\n",
        "\n",
        "full_metadata.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "SWnZdODnQnoV"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k61tu0as5Qj3",
        "outputId": "7e5e8154-cbc2-4d6d-f61c-506889fe08a8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting Sequence\n",
            "  Downloading sequence-0.3.4.tar.gz (5.4 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting daytime (from Sequence)\n",
            "  Downloading daytime-0.4.tar.gz (2.4 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: Sequence, daytime\n",
            "  Building wheel for Sequence (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for Sequence: filename=sequence-0.3.4-py3-none-any.whl size=5396 sha256=73c57a6d64129568d614e697ab5dd24113a8a165e3335848f408cdb0119bdb07\n",
            "  Stored in directory: /root/.cache/pip/wheels/4c/bd/44/af4ff25940a673c359d905591bad7468270108e1d2255bd720\n",
            "  Building wheel for daytime (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for daytime: filename=daytime-0.4-py3-none-any.whl size=2401 sha256=a35a7547e0a93a154957bc19a8a4b1f48e722a81406003efdcfcc548b399af65\n",
            "  Stored in directory: /root/.cache/pip/wheels/cd/40/c7/fc109bc6716d31e4d5fdc0cd72891253fa46032e71d9aa1b93\n",
            "Successfully built Sequence daytime\n",
            "Installing collected packages: daytime, Sequence\n",
            "Successfully installed Sequence-0.3.4 daytime-0.4\n"
          ]
        }
      ],
      "source": [
        "!pip install Sequence"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "psKw5xYekXBX"
      },
      "outputs": [],
      "source": [
        "# Do not bother about this now. Needs debugging.\n",
        "\n",
        "# from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, mean_squared_error, mean_absolute_error\n",
        "# from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# # Generate predictions on test data\n",
        "# y_pred_prob = []\n",
        "\n",
        "# for i in range(len(test_img_gen)):\n",
        "#     # Get a batch of image data\n",
        "#     test_img_batch, _ = test_img_gen.next()\n",
        "\n",
        "#     # Get corresponding metadata batch\n",
        "#     test_metadata_batch = test_metadata_gen[i][0][1]  # Extract metadata from the generator\n",
        "\n",
        "#     # Preprocess image data\n",
        "#     test_img_batch = test_datagen.standardize(test_img_batch)\n",
        "\n",
        "#     # Generate predictions for the batch\n",
        "#     batch_pred_prob = model.predict([test_img_batch, test_metadata_batch])\n",
        "\n",
        "#     # Append the batch predictions to the list\n",
        "#     y_pred_prob.extend(batch_pred_prob)\n",
        "\n",
        "# # Convert probabilities to class labels\n",
        "# y_pred = np.argmax(y_pred_prob, axis=1)\n",
        "\n",
        "# # Calculate metrics\n",
        "# accuracy = accuracy_score(y_test, y_pred)\n",
        "# precision = precision_score(y_test, y_pred)\n",
        "# recall = recall_score(y_test, y_pred)\n",
        "# f1 = f1_score(y_test, y_pred)\n",
        "# # mse = mean_squared_error(y_test, y_pred)\n",
        "# # mae = mean_absolute_error(y_test, y_pred)\n",
        "\n",
        "# # Print metrics\n",
        "# print(\"Accuracy:\", accuracy)\n",
        "# print(\"Precision:\", precision)\n",
        "# print(\"Recall:\", recall)\n",
        "# print(\"F1-score:\", f1)\n",
        "\n",
        "# # Confusion matrix\n",
        "# conf_mat = confusion_matrix(y_test, y_pred)\n",
        "# print(\"Confusion Matrix:\")\n",
        "# print(conf_mat)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vMqVGxFCqQmr",
        "outputId": "33a50d48-7241-4f2a-b973-d0a06bd4979f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 25331 entries, ISIC_0000000 to ISIC_0073254\n",
            "Data columns (total 33 columns):\n",
            " #   Column                               Non-Null Count  Dtype  \n",
            "---  ------                               --------------  -----  \n",
            " 0   MEL                                  25331 non-null  float64\n",
            " 1   NV                                   25331 non-null  float64\n",
            " 2   BCC                                  25331 non-null  float64\n",
            " 3   AK                                   25331 non-null  float64\n",
            " 4   BKL                                  25331 non-null  float64\n",
            " 5   DF                                   25331 non-null  float64\n",
            " 6   VASC                                 25331 non-null  float64\n",
            " 7   SCC                                  25331 non-null  float64\n",
            " 8   UNK                                  25331 non-null  float64\n",
            " 9   age_approx                           25331 non-null  int64  \n",
            " 10  clin_size_long_diam_mm               556 non-null    float64\n",
            " 11  concomitant_biopsy                   25331 non-null  int64  \n",
            " 12  family_hx_mm                         25331 non-null  int64  \n",
            " 13  melanocytic                          25331 non-null  int64  \n",
            " 14  personal_hx_mm                       25331 non-null  int64  \n",
            " 15  image_path                           25331 non-null  object \n",
            " 16  consolidated_path                    25331 non-null  int64  \n",
            " 17  is_discrepant                        25331 non-null  int64  \n",
            " 18  discrepancy_details                  25331 non-null  int64  \n",
            " 19  anatom_site_general_anterior torso   25331 non-null  int64  \n",
            " 20  anatom_site_general_head/neck        25331 non-null  int64  \n",
            " 21  anatom_site_general_lateral torso    25331 non-null  int64  \n",
            " 22  anatom_site_general_lower extremity  25331 non-null  int64  \n",
            " 23  anatom_site_general_oral/genital     25331 non-null  int64  \n",
            " 24  anatom_site_general_palms/soles      25331 non-null  int64  \n",
            " 25  anatom_site_general_posterior torso  25331 non-null  int64  \n",
            " 26  anatom_site_general_unknown          25331 non-null  int64  \n",
            " 27  anatom_site_general_upper extremity  25331 non-null  int64  \n",
            " 28  benign                               25331 non-null  int64  \n",
            " 29  malignant                            25331 non-null  int64  \n",
            " 30  sex_female                           25331 non-null  int64  \n",
            " 31  sex_male                             25331 non-null  int64  \n",
            " 32  sex_unknown                          25331 non-null  int64  \n",
            "dtypes: float64(10), int64(22), object(1)\n",
            "memory usage: 6.6+ MB\n"
          ]
        }
      ],
      "source": [
        "label_encoder = LabelEncoder()\n",
        "for column in ['age_approx']:\n",
        "    full_metadata[column] = label_encoder.fit_transform(full_metadata[column])\n",
        "\n",
        "\n",
        "full_metadata.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qgxa0ynpAJvs",
        "outputId": "a7d3c416-5ee6-4d14-ba78-519b8ec13cd8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class counts before resampling:\n",
            " NV      10308.0\n",
            "MEL      3607.0\n",
            "BCC      2665.0\n",
            "BKL      2088.0\n",
            "AK        690.0\n",
            "SCC       524.0\n",
            "DF        191.0\n",
            "VASC      191.0\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.utils import resample\n",
        "\n",
        "# Let's separate features and labels first\n",
        "X = full_metadata.drop(['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC', 'UNK'], axis=1)\n",
        "y = full_metadata[['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC']]  # Excluded 'UNK'\n",
        "\n",
        "# Now, we split the data into training and testing sets\n",
        "X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Calculate the number of samples per class\n",
        "class_counts = y_train.sum().sort_values(ascending=False)\n",
        "print(\"Class counts before resampling:\\n\",class_counts)\n",
        "\n",
        "# Find the maximum number of samples in any single class\n",
        "max_samples = class_counts.max()\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PH_igCL7wMak",
        "outputId": "519834e2-0d97-4572-80ce-2e9a434ee3fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "New class counts after resampling:\n",
            " MEL      20651.0\n",
            "NV        6957.0\n",
            "BCC      25309.0\n",
            "AK       77387.0\n",
            "BKL      30227.0\n",
            "DF      261561.0\n",
            "VASC    261561.0\n",
            "SCC      99679.0\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "# Split the X_temp and y_temp further into validation and test sets\n",
        "X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n",
        "\n",
        "# Calculate the target number of samples\n",
        "target_samples = int((3607 + 10308) / 2)  # adjust this as needed\n",
        "\n",
        "# Create new DataFrame for the balanced dataset\n",
        "X_train_resampled = pd.DataFrame(columns=X_train.columns)\n",
        "y_train_resampled = pd.DataFrame(columns=y_train.columns)\n",
        "\n",
        "# Iterate through each class and apply resampling\n",
        "for column in y_train.columns:\n",
        "    # Filter samples for the current class\n",
        "    filter_mask = y_train[column] == 1\n",
        "    X_class = X_train[filter_mask]\n",
        "    y_class = y_train[filter_mask]\n",
        "\n",
        "    num_samples = len(X_class)\n",
        "    if num_samples > 0:\n",
        "        if num_samples < target_samples:\n",
        "            # Oversample minority classes\n",
        "            X_class_resampled, y_class_resampled = resample(X_class, y_class,\n",
        "                                                            replace=True,  # Sample with replacement\n",
        "                                                            n_samples=target_samples,  # Match the target samples\n",
        "                                                            random_state=42)\n",
        "        else:\n",
        "            # For majority or adequately represented classes, we might undersample or keep as is\n",
        "            X_class_resampled, y_class_resampled = resample(X_class, y_class,\n",
        "                                                            replace=False,\n",
        "                                                            n_samples=target_samples,\n",
        "                                                            random_state=42)\n",
        "\n",
        "        # Append resampled data back to the overall dataset\n",
        "        X_train_resampled = pd.concat([X_train_resampled, X_class_resampled], axis=0)\n",
        "        y_train_resampled = pd.concat([y_train_resampled, y_class_resampled], axis=0)\n",
        "    else:\n",
        "        print(f\"No instances to resample for class '{column}'\")\n",
        "\n",
        "# Shuffle the dataset to mix up class order (important for training)\n",
        "X_train_resampled = X_train_resampled.sample(frac=1, random_state=42)\n",
        "y_train_resampled = y_train_resampled.loc[X_train_resampled.index]\n",
        "\n",
        "print(\"New class counts after resampling:\\n\", y_train_resampled.sum())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VQoC1ZUKARWB",
        "outputId": "ca9d5eca-e5a8-41b2-b666-adffaad6ea3e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "image\n",
              "ISIC_0000000     NV\n",
              "ISIC_0000001     NV\n",
              "ISIC_0000002    MEL\n",
              "ISIC_0000003     NV\n",
              "ISIC_0000004    MEL\n",
              "               ... \n",
              "ISIC_0073247    BCC\n",
              "ISIC_0073248    BKL\n",
              "ISIC_0073249    MEL\n",
              "ISIC_0073251     NV\n",
              "ISIC_0073254    BKL\n",
              "Name: labels, Length: 25331, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "# Concatenate multiple columns into a single 'labels' column\n",
        "#full_metadata['labels'] = full_metadata[['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC']].idxmax(axis=1)\n",
        "# Creating a single 'labels' column\n",
        "class_columns = ['MEL', 'NV', 'BCC', 'AK', 'BKL', 'DF', 'VASC', 'SCC']  # Adjust if there are different/more classes\n",
        "full_metadata['labels'] = (full_metadata[class_columns] == 1).idxmax(1)\n",
        "full_metadata['labels']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "su11Y4KyVPLF"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n5nnZrRmdVh2",
        "outputId": "af9674fc-05e9-45cf-e503-bdbb66682e07"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 25331 entries, ISIC_0000000 to ISIC_0073254\n",
            "Data columns (total 34 columns):\n",
            " #   Column                               Non-Null Count  Dtype  \n",
            "---  ------                               --------------  -----  \n",
            " 0   MEL                                  25331 non-null  float64\n",
            " 1   NV                                   25331 non-null  float64\n",
            " 2   BCC                                  25331 non-null  float64\n",
            " 3   AK                                   25331 non-null  float64\n",
            " 4   BKL                                  25331 non-null  float64\n",
            " 5   DF                                   25331 non-null  float64\n",
            " 6   VASC                                 25331 non-null  float64\n",
            " 7   SCC                                  25331 non-null  float64\n",
            " 8   UNK                                  25331 non-null  float64\n",
            " 9   age_approx                           25331 non-null  int64  \n",
            " 10  clin_size_long_diam_mm               556 non-null    float64\n",
            " 11  concomitant_biopsy                   25331 non-null  int64  \n",
            " 12  family_hx_mm                         25331 non-null  int64  \n",
            " 13  melanocytic                          25331 non-null  int64  \n",
            " 14  personal_hx_mm                       25331 non-null  int64  \n",
            " 15  image_path                           25331 non-null  object \n",
            " 16  consolidated_path                    25331 non-null  int64  \n",
            " 17  is_discrepant                        25331 non-null  int64  \n",
            " 18  discrepancy_details                  25331 non-null  int64  \n",
            " 19  anatom_site_general_anterior torso   25331 non-null  int64  \n",
            " 20  anatom_site_general_head/neck        25331 non-null  int64  \n",
            " 21  anatom_site_general_lateral torso    25331 non-null  int64  \n",
            " 22  anatom_site_general_lower extremity  25331 non-null  int64  \n",
            " 23  anatom_site_general_oral/genital     25331 non-null  int64  \n",
            " 24  anatom_site_general_palms/soles      25331 non-null  int64  \n",
            " 25  anatom_site_general_posterior torso  25331 non-null  int64  \n",
            " 26  anatom_site_general_unknown          25331 non-null  int64  \n",
            " 27  anatom_site_general_upper extremity  25331 non-null  int64  \n",
            " 28  benign                               25331 non-null  int64  \n",
            " 29  malignant                            25331 non-null  int64  \n",
            " 30  sex_female                           25331 non-null  int64  \n",
            " 31  sex_male                             25331 non-null  int64  \n",
            " 32  sex_unknown                          25331 non-null  int64  \n",
            " 33  labels                               25331 non-null  object \n",
            "dtypes: float64(10), int64(22), object(2)\n",
            "memory usage: 7.8+ MB\n"
          ]
        }
      ],
      "source": [
        "\n",
        "full_metadata.info()\n",
        "# full_metadata['AK'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "w9GxoI3lom_K"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "IX3RF1u5ooCD"
      },
      "outputs": [],
      "source": [
        "# Feature modification code added into the Cancer-Net SCa model.\n",
        "# Improving the features selected. The previous features selected was weak.\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "# Create a copy of the data to extract the most important features\n",
        "# Make sure to call the copy() method\n",
        "\n",
        "cleaned_data = full_metadata.copy()\n",
        "\n",
        "# cleaned_data.info()\n",
        "# cleaned_data['AK'].value_counts()\n",
        "\n",
        "# result = cleaned_data['AK'].apply(lambda x: isinstance(x, str)).any()\n",
        "# if result:\n",
        "#     print(\"There are strings in the column\")\n",
        "# else:\n",
        "#     print(\"There are no strings in the column\")\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NXzqoxvRjGOZ",
        "outputId": "3d0b695b-4871-431c-edf7-1393fb7ea615"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NV: 0.20804286045704978\n",
            "MEL: 0.13965095178630077\n",
            "BCC: 0.03990236628995216\n",
            "AK: 0.0361921311319783\n",
            "BKL: 0.01583720941028916\n",
            "DF: 0.013818713121411953\n",
            "age_approx: 0.010055190803524561\n",
            "UNK: 0.005996402289874564\n",
            "VASC: 0.003368763290549101\n",
            "consolidated_path: 0.0025395452385978084\n",
            "SCC: 0.0018081394383565152\n",
            "personal_hx_mm: 0.0017437136728067578\n",
            "sex_female: 0.0012844012591474222\n",
            "melanocytic: 0.0010412733768065175\n",
            "concomitant_biopsy: 0.0008486393366319311\n",
            "family_hx_mm: 0.0006890785050338473\n",
            "labels: 0.0006833920962581929\n",
            "clin_size_long_diam_mm: 0.000586245655801386\n",
            "anatom_site_general_posterior torso: 0.0005155445118639741\n",
            "anatom_site_general_upper extremity: 0.0005064550835661752\n",
            "anatom_site_general_palms/soles: 0.0004085412818676715\n",
            "anatom_site_general_unknown: 0.0003730575332391511\n",
            "anatom_site_general_oral/genital: 0.0003542540467988791\n",
            "anatom_site_general_lateral torso: 0.00023812027698574676\n",
            "benign: 0.00023656120926167284\n",
            "sex_unknown: 0.00022282728296784519\n",
            "sex_male: 0.00021478139668285433\n",
            "anatom_site_general_lower extremity: 0.0001949120151738646\n",
            "anatom_site_general_head/neck: 0.00017066496068105273\n",
            "anatom_site_general_anterior torso: 7.48416376117549e-05\n",
            "discrepancy_details: 7.606706271449718e-06\n",
            "is_discrepant: 0.0\n"
          ]
        }
      ],
      "source": [
        "# # Feature modification code added into the Cancer-Net SCa model.\n",
        "# # Improving the features selected. The previous features selected was weak.\n",
        "\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "# # Assuming cleaned_data is a DataFrame and 'malignant', 'image_path' are columns in this DataFrame\n",
        "# Prepare data by dropping non-features columns\n",
        "\n",
        "X = cleaned_data.drop(['malignant', 'image_path'], axis=1)  # Drop columns correctly in DataFrame\n",
        "y = cleaned_data['malignant']  # This should be fine as it extracts a Series\n",
        "\n",
        "# X.head()\n",
        "# y.head()\n",
        "# Split data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "encoder = OneHotEncoder()\n",
        "encoded_data = encoder.fit_transform(X_train)\n",
        "\n",
        "# Train model\n",
        "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "# rf.fit(X_train, y_train)\n",
        "rf.fit(encoded_data, y_train)\n",
        "\n",
        "# Get feature importance\n",
        "importances = rf.feature_importances_\n",
        "feature_names = X.columns\n",
        "feature_importance_dict = dict(zip(feature_names, importances))\n",
        "# Print sorted feature importance\n",
        "sorted_importance = sorted(feature_importance_dict.items(), key=lambda item: item[1], reverse=True)\n",
        "for feature, importance in sorted_importance:\n",
        "    print(f\"{feature}: {importance}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "zzMF4x_0VnVf",
        "outputId": "ab22bec6-18ff-4a5f-ff4c-89ab62f7c661"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 20517 validated image filenames belonging to 2 classes.\n",
            "Found 2280 validated image filenames belonging to 2 classes.\n",
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                Output Shape                 Param #   Connected to                  \n",
            "==================================================================================================\n",
            " input_1 (InputLayer)        [(None, 224, 224, 3)]        0         []                            \n",
            "                                                                                                  \n",
            " conv2d (Conv2D)             (None, 222, 222, 32)         896       ['input_1[0][0]']             \n",
            "                                                                                                  \n",
            " max_pooling2d (MaxPooling2  (None, 111, 111, 32)         0         ['conv2d[0][0]']              \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2d_1 (Conv2D)           (None, 109, 109, 64)         18496     ['max_pooling2d[0][0]']       \n",
            "                                                                                                  \n",
            " max_pooling2d_1 (MaxPoolin  (None, 54, 54, 64)           0         ['conv2d_1[0][0]']            \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " input_2 (InputLayer)        [(None, 5)]                  0         []                            \n",
            "                                                                                                  \n",
            " flatten (Flatten)           (None, 186624)               0         ['max_pooling2d_1[0][0]']     \n",
            "                                                                                                  \n",
            " dense (Dense)               (None, 32)                   192       ['input_2[0][0]']             \n",
            "                                                                                                  \n",
            " concatenate (Concatenate)   (None, 186656)               0         ['flatten[0][0]',             \n",
            "                                                                     'dense[0][0]']               \n",
            "                                                                                                  \n",
            " dense_1 (Dense)             (None, 64)                   1194604   ['concatenate[0][0]']         \n",
            "                                                          8                                       \n",
            "                                                                                                  \n",
            " batch_normalization (Batch  (None, 64)                   256       ['dense_1[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " dropout (Dropout)           (None, 64)                   0         ['batch_normalization[0][0]'] \n",
            "                                                                                                  \n",
            " dense_2 (Dense)             (None, 1)                    65        ['dropout[0][0]']             \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 11965953 (45.65 MB)\n",
            "Trainable params: 11965825 (45.65 MB)\n",
            "Non-trainable params: 128 (512.00 Byte)\n",
            "__________________________________________________________________________________________________\n",
            "Epoch 1/10\n",
            "642/642 [==============================] - ETA: 0s - loss: 0.2030 - accuracy: 0.9233\n",
            "Epoch 1: val_accuracy improved from -inf to 0.94649, saving model to CancerNet_best_model.keras\n",
            "642/642 [==============================] - 555s 850ms/step - loss: 0.2030 - accuracy: 0.9233 - val_loss: 0.1190 - val_accuracy: 0.9465\n",
            "Epoch 2/10\n",
            "642/642 [==============================] - ETA: 0s - loss: 0.4389 - accuracy: 0.8333\n",
            "Epoch 2: val_accuracy did not improve from 0.94649\n",
            "642/642 [==============================] - 596s 928ms/step - loss: 0.4389 - accuracy: 0.8333 - val_loss: 0.4216 - val_accuracy: 0.8351\n",
            "Epoch 3/10\n",
            "642/642 [==============================] - ETA: 0s - loss: 0.4112 - accuracy: 0.8390\n",
            "Epoch 3: val_accuracy did not improve from 0.94649\n",
            "642/642 [==============================] - 531s 827ms/step - loss: 0.4112 - accuracy: 0.8390 - val_loss: 0.7874 - val_accuracy: 0.4487\n",
            "Epoch 4/10\n",
            "297/642 [============>.................] - ETA: 4:14 - loss: 0.4068 - accuracy: 0.8375"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-40-0d7fb0a6498f>\u001b[0m in \u001b[0;36m<cell line: 125>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m \u001b[0;31m# Train the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m history = model.fit(\n\u001b[0m\u001b[1;32m    126\u001b[0m     \u001b[0mtrain_gen\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_gen\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1805\u001b[0m                         ):\n\u001b[1;32m   1806\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1807\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1808\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1809\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    831\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 832\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    834\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    866\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    867\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 868\u001b[0;31m       return tracing_compilation.call_function(\n\u001b[0m\u001b[1;32m    869\u001b[0m           \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_no_variable_creation_config\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    870\u001b[0m       )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    137\u001b[0m   \u001b[0mbound_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m   \u001b[0mflat_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munpack_inputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbound_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m   return function._call_flat(  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m    140\u001b[0m       \u001b[0mflat_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m   )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, tensor_inputs, captured_inputs)\u001b[0m\n\u001b[1;32m   1321\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1322\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1323\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inference_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1324\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1325\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_preflattened\u001b[0;34m(self, args)\u001b[0m\n\u001b[1;32m    214\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSequence\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;34m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m     \u001b[0mflat_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpack_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflat_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_flat\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mrecord\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_recording\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bound_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m             outputs = self._bound_context.call_function(\n\u001b[0m\u001b[1;32m    252\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m                 \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/context.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(self, name, tensor_inputs, num_outputs)\u001b[0m\n\u001b[1;32m   1484\u001b[0m     \u001b[0mcancellation_context\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcancellation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1485\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcancellation_context\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1486\u001b[0;31m       outputs = execute.execute(\n\u001b[0m\u001b[1;32m   1487\u001b[0m           \u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1488\u001b[0m           \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     54\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "# Cancer-Net SCa Model\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from tensorflow.keras.layers import Input, Dense, Conv2D, MaxPooling2D, Flatten, Concatenate, Dropout, BatchNormalization\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "from tensorflow.keras.utils import Sequence\n",
        "\n",
        "# Define the Cancer-Net SCa model architecture\n",
        "def build_cancer_net_sca(input_shape=(224, 224, 3), metadata_shape=(5,)):\n",
        "    # Image input model\n",
        "    image_input = Input(shape=input_shape)\n",
        "    conv1 = Conv2D(32, kernel_size=(3, 3), activation='relu')(image_input)\n",
        "    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n",
        "    conv2 = Conv2D(64, kernel_size=(3, 3), activation='relu')(pool1)\n",
        "    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n",
        "    flatten_img = Flatten()(pool2)\n",
        "\n",
        "    # Metadata input model\n",
        "    metadata_input = Input(shape=metadata_shape)\n",
        "    dense_meta = Dense(32, activation='relu')(metadata_input)\n",
        "\n",
        "    # Concatenate both branches\n",
        "    concatenated = Concatenate()([flatten_img, dense_meta])\n",
        "    x = Dense(64, activation='relu')(concatenated)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = Dropout(0.5)(x)\n",
        "    output = Dense(1, activation='sigmoid')(x)\n",
        "\n",
        "    model = Model(inputs=[image_input, metadata_input], outputs=output)\n",
        "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "    return model\n",
        "\n",
        "# Load your full_metadata\n",
        "full_metadata['target'] = full_metadata['malignant'].astype(str)  # Convert target to string for compatibility\n",
        "\n",
        "# Data splitting\n",
        "train_val_data, test_data = train_test_split(full_metadata, test_size=0.1, random_state=42)\n",
        "train_data, val_data = train_test_split(train_val_data, test_size=0.1, random_state=42)\n",
        "\n",
        "test_data.head()\n",
        "\n",
        "# Image Data Generators for augmentation\n",
        "train_datagen = ImageDataGenerator(\n",
        "    rescale=1./255,\n",
        "    rotation_range=20,\n",
        "    width_shift_range=0.1,\n",
        "    height_shift_range=0.1,\n",
        "    shear_range=0.1,\n",
        "    zoom_range=0.1,\n",
        "    horizontal_flip=True,\n",
        "    fill_mode='nearest'\n",
        ")\n",
        "\n",
        "val_test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "# Setup training and validation image generators\n",
        "train_img_gen = train_datagen.flow_from_dataframe(\n",
        "    dataframe=train_data,\n",
        "    x_col='image_path',\n",
        "    y_col='target',\n",
        "    target_size=(224, 224),\n",
        "    batch_size=32,\n",
        "    class_mode='binary',\n",
        "    shuffle=False  # Important: do not shuffle here, the generator will handle it\n",
        ")\n",
        "\n",
        "val_img_gen = val_test_datagen.flow_from_dataframe(\n",
        "    dataframe=val_data,\n",
        "    x_col='image_path',\n",
        "    y_col='target',\n",
        "    target_size=(224, 224),\n",
        "    batch_size=32,\n",
        "    class_mode='binary',\n",
        "    shuffle=False\n",
        ")\n",
        "\n",
        "class MultiInputGenerator(Sequence):\n",
        "    def __init__(self, img_generator, metadata, batch_size):\n",
        "        self.img_generator = img_generator\n",
        "        self.metadata = metadata\n",
        "        self.indices = np.arange(len(metadata))\n",
        "        self.batch_size = batch_size\n",
        "\n",
        "    def __len__(self):\n",
        "        return int(np.ceil(len(self.metadata) / float(self.batch_size)))\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        inds = self.indices[idx * self.batch_size:(idx + 1) * self.batch_size]\n",
        "        batch_imgs, labels = self.img_generator.__getitem__(idx)\n",
        "        batch_meta = self.metadata.iloc[inds].values\n",
        "        return [batch_imgs, batch_meta], labels\n",
        "\n",
        "    def on_epoch_end(self):\n",
        "        np.random.shuffle(self.indices)\n",
        "\n",
        "# Prepare the metadata features for training\n",
        "\n",
        "metadata_features = [\"NV\", \"MEL\", \"BCC\", \"AK\", \"BKL\"]\n",
        "# metadata_features = ['age_approx', 'concomitant_biopsy', 'melanocytic', 'sex_male', 'sex_female']\n",
        "train_metadata = train_data[metadata_features].values\n",
        "val_metadata = val_data[metadata_features].values\n",
        "\n",
        "# Build Cancer-Net SCa model\n",
        "model = build_cancer_net_sca()\n",
        "\n",
        "# Display model summary\n",
        "model.summary()\n",
        "\n",
        "# Prepare training and validation generators\n",
        "train_gen = MultiInputGenerator(train_img_gen, train_data[metadata_features], batch_size=32)\n",
        "val_gen = MultiInputGenerator(val_img_gen, val_data[metadata_features], batch_size=32)\n",
        "\n",
        "# Define callbacks\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=10, verbose=1, restore_best_weights=True)\n",
        "model_checkpoint = ModelCheckpoint('CancerNet_best_model.keras', monitor='val_accuracy', save_best_only=True, verbose=1)\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(\n",
        "    train_gen,\n",
        "    validation_data=val_gen,\n",
        "    epochs=10,\n",
        "    callbacks=[early_stopping, model_checkpoint]\n",
        ")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mv April214pm_CancerNet_best_model.keras /content/drive/MyDrive/"
      ],
      "metadata": {
        "id": "AEZDWfZX_29s"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rD828UJW9E_a",
        "outputId": "9cb5865d-7b4b-4f61-c2ce-116d1def39bc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 2534 validated image filenames belonging to 2 classes.\n",
            "80/80 [==============================] - 36s 453ms/step - loss: 0.3998 - accuracy: 0.8437\n",
            "Test Loss: 0.39980098605155945\n",
            "Test Accuracy: 0.843725323677063\n"
          ]
        }
      ],
      "source": [
        "# Cancer-Net SCa for Test Data\n",
        "# Image Data Generator for test data\n",
        "\n",
        "\n",
        "class Test_MultiInputGenerator(Sequence):\n",
        "    def __init__(self, img_generator, metadata, batch_size):\n",
        "        self.img_generator = img_generator\n",
        "        self.metadata = metadata\n",
        "        self.indices = np.arange(len(metadata))\n",
        "        self.batch_size = batch_size\n",
        "\n",
        "    def __len__(self):\n",
        "        return int(np.ceil(len(self.metadata) / float(self.batch_size)))\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        inds = self.indices[idx * self.batch_size:(idx + 1) * self.batch_size]\n",
        "        batch_imgs, labels = self.img_generator.__getitem__(idx)\n",
        "        batch_meta = self.metadata[inds]\n",
        "        return [batch_imgs, batch_meta], labels\n",
        "\n",
        "    def on_epoch_end(self):\n",
        "        np.random.shuffle(self.indices)\n",
        "\n",
        "# Adjust the output layer to have two units\n",
        "# dense_2 = Dense(2, activation='softmax')\n",
        "# Adjust the output layer to have a single unit with sigmoid activation for binary classification\n",
        "output = Dense(1, activation='sigmoid')\n",
        "\n",
        "# Compile the model with binary crossentropy loss and accuracy metric\n",
        "# model.compile(loss='binary_crossentropy', metrics=['accuracy'])\n",
        "# Compile the model with binary crossentropy loss and accuracy metric\n",
        "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Image Data Generator for test data\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "# Setup test image generator\n",
        "test_img_gen = test_datagen.flow_from_dataframe(\n",
        "    dataframe=test_data,\n",
        "    x_col='image_path',  # Assuming 'image_path' is the column containing file paths to test images\n",
        "    y_col='target',  # Assuming 'target' is the column containing the target labels\n",
        "    target_size=(224, 224),\n",
        "    batch_size=32,\n",
        "    class_mode='binary',\n",
        "    shuffle=False  # Do not shuffle test data\n",
        ")\n",
        "\n",
        "# Optionally, create a generator for the metadata if needed\n",
        "test_metadata_df = test_data[metadata_features].values\n",
        "test_metadata_gen = Test_MultiInputGenerator(test_img_gen, test_metadata_df, batch_size=32)\n",
        "\n",
        "# Evaluate the model on the test data\n",
        "test_loss, test_accuracy = model.evaluate(test_metadata_gen, verbose=1)\n",
        "\n",
        "print(\"Test Loss:\", test_loss)\n",
        "print(\"Test Accuracy:\", test_accuracy)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "5zzeG7C7GeBJ"
      },
      "outputs": [],
      "source": [
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KzDtL6ihHt7O",
        "outputId": "935932f7-8cc8-40b5-be42-5fc166b3e1b7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/129.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.1/129.1 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ],
      "source": [
        "!pip install -q -U keras-tuner"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "krC3rHgBVQ7r",
        "outputId": "a9f7d4df-060c-4930-f675-042ee9991413"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Trial 9 Complete [00h 00m 23s]\n",
            "val_accuracy: 0.78125\n",
            "\n",
            "Best val_accuracy So Far: 0.78125\n",
            "Total elapsed time: 00h 02m 30s\n",
            "3/3 [==============================] - 1s 310ms/step - loss: 0.5141 - accuracy: 0.7812\n",
            "Test Loss: 0.514\n",
            "Test Accuracy: 0.781\n"
          ]
        }
      ],
      "source": [
        "# Hyperparameter Tuning\n",
        "import kerastuner as kt\n",
        "from tensorflow import keras\n",
        "from kerastuner import Hyperband\n",
        "from kerastuner import HyperParameters\n",
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "\n",
        "class TestInputGenerator(Sequence):\n",
        "    def __init__(self, img_generator, batch_size):\n",
        "        self.img_generator = img_generator\n",
        "        self.batch_size = batch_size\n",
        "\n",
        "    def __len__(self):\n",
        "        return int(np.ceil(len(self.img_generator) / float(self.batch_size)))\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        batch_imgs, labels = self.img_generator.__getitem__(idx)\n",
        "        return batch_imgs, to_categorical(labels, num_classes=2)  # One-hot encode labels\n",
        "\n",
        "    def on_epoch_end(self):\n",
        "        self.img_generator.on_epoch_end()\n",
        "\n",
        "\n",
        "# Define the model-building function\n",
        "def build_model(hp):\n",
        "    model = keras.Sequential([\n",
        "        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
        "        layers.MaxPooling2D((2, 2)),\n",
        "        layers.Flatten(),\n",
        "        layers.Dense(hp.Choice('units', [64, 128, 256]), activation='relu'),\n",
        "        layers.Dropout(0.2),\n",
        "        layers.Dense(2, activation='softmax')\n",
        "    ])\n",
        "    model.compile(\n",
        "        optimizer=keras.optimizers.Adam(hp.Choice('learning_rate', [0.001, 0.01, 0.1])),\n",
        "        loss='binary_crossentropy',\n",
        "        metrics=['accuracy']\n",
        "    )\n",
        "    return model\n",
        "\n",
        "# Define a data generator for test data\n",
        "# Define a data generator for test data\n",
        "test_img_gen.reset()\n",
        "test_data_gen = TestInputGenerator(test_img_gen, batch_size=32)\n",
        "\n",
        "\n",
        "# Perform hyperparameter tuning\n",
        "tuner = kt.Hyperband(\n",
        "    build_model,\n",
        "    objective='val_accuracy',\n",
        "    max_epochs=10,\n",
        "    factor=3,\n",
        "    directory='my_dir',\n",
        "    project_name='hyperparameter_tuning'\n",
        ")\n",
        "\n",
        "tuner.search(test_data_gen, epochs=50, validation_data=test_data_gen)\n",
        "\n",
        "# Get the best model and hyperparameters\n",
        "best_model = tuner.get_best_models(num_models=1)[0]\n",
        "best_hyperparams = tuner.get_best_hyperparameters(num_trials=1)[0]\n",
        "\n",
        "# Evaluate the best model\n",
        "test_loss, test_accuracy = best_model.evaluate(test_data_gen)\n",
        "print(f'Test Loss: {test_loss:.3f}')\n",
        "print(f'Test Accuracy: {test_accuracy:.3f}')\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Do not bother about this now. Needs debugging.\n",
        "\n",
        "# from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, mean_squared_error, mean_absolute_error\n",
        "# from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# # Generate predictions on test data\n",
        "# y_pred_prob = []\n",
        "\n",
        "# for i in range(len(test_img_gen)):\n",
        "#     # Get a batch of image data\n",
        "#     test_img_batch, _ = test_img_gen.next()\n",
        "\n",
        "#     # Get corresponding metadata batch\n",
        "#     test_metadata_batch = test_metadata_gen[i][0][1]  # Extract metadata from the generator\n",
        "\n",
        "#     # Preprocess image data\n",
        "#     test_img_batch = test_datagen.standardize(test_img_batch)\n",
        "\n",
        "#     # Generate predictions for the batch\n",
        "#     batch_pred_prob = model.predict([test_img_batch, test_metadata_batch])\n",
        "\n",
        "#     # Append the batch predictions to the list\n",
        "#     y_pred_prob.extend(batch_pred_prob)\n",
        "\n",
        "# # Convert probabilities to class labels\n",
        "# y_pred = np.argmax(y_pred_prob, axis=1)\n",
        "\n",
        "# # Calculate metrics\n",
        "# accuracy = accuracy_score(y_test, y_pred)\n",
        "# precision = precision_score(y_test, y_pred)\n",
        "# recall = recall_score(y_test, y_pred)\n",
        "# f1 = f1_score(y_test, y_pred)\n",
        "# # mse = mean_squared_error(y_test, y_pred)\n",
        "# # mae = mean_absolute_error(y_test, y_pred)\n",
        "\n",
        "# # Print metrics\n",
        "# print(\"Accuracy:\", accuracy)\n",
        "# print(\"Precision:\", precision)\n",
        "# print(\"Recall:\", recall)\n",
        "# print(\"F1-score:\", f1)\n",
        "\n",
        "# # Confusion matrix\n",
        "# conf_mat = confusion_matrix(y_test, y_pred)\n",
        "# print(\"Confusion Matrix:\")\n",
        "# print(conf_mat)\n",
        "\n"
      ],
      "metadata": {
        "id": "Tco_n6vRPH0S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GiUXRRUg0P_W"
      },
      "source": [
        "DeniseNet169 had low accuracy scores of 40%. Takes too long to run. Commenting the code out. CancerNetSCa model gets us better results."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "EkjIcsC-wRNs"
      },
      "outputs": [],
      "source": [
        "# # DenseNet169 Model.\n",
        "# import numpy as np\n",
        "# import pandas as pd\n",
        "# import sklearn.utils.class_weight\n",
        "\n",
        "# from sklearn.model_selection import train_test_split\n",
        "# from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "# from tensorflow.keras.applications import DenseNet169\n",
        "# from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, BatchNormalization, Activation\n",
        "# from tensorflow.keras.models import Model\n",
        "# from tensorflow.keras.utils import to_categorical\n",
        "# from sklearn.utils.class_weight import compute_class_weight\n",
        "\n",
        "# # Assuming 'full_metadata' is already defined and loaded as shown previously\n",
        "# # full_metadata['labels']\n",
        "# # Splitting the data into training, validation, and test sets\n",
        "# train_val_data, test_data = train_test_split(full_metadata, test_size=0.1, random_state=42)\n",
        "# train_data, val_data = train_test_split(train_val_data, test_size=0.1, random_state=42)\n",
        "\n",
        "# # print(train_val_data.info())\n",
        "\n",
        "# # print(train_data.info())\n",
        "\n",
        "# import os\n",
        "\n",
        "# # Sample 15 rows from your DataFrame\n",
        "# sample_data = train_data.sample(n=15, random_state=42)\n",
        "\n",
        "# # # Iterate over each row in the sample and test the file path\n",
        "# # for index, row in sample_data.iterrows():\n",
        "# #     image_path = row['image_path']\n",
        "# #     if os.path.exists(image_path):\n",
        "# #         print(f\"Image file exists: {image_path}\")\n",
        "# #     else:\n",
        "# #         print(f\"Image file not found: {image_path}\")\n",
        "\n",
        "# # Prepare ImageDataGenerator for training and validation\n",
        "# train_datagen = ImageDataGenerator(\n",
        "#     rescale=1./255,\n",
        "#     rotation_range=40,\n",
        "#     width_shift_range=0.2,\n",
        "#     height_shift_range=0.2,\n",
        "#     shear_range=0.2,\n",
        "#     zoom_range=0.2,\n",
        "#     horizontal_flip=True,\n",
        "#     fill_mode='nearest'\n",
        "# )\n",
        "\n",
        "# val_test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "# # Setup generators\n",
        "# train_generator = train_datagen.flow_from_dataframe(\n",
        "#     dataframe=train_data,\n",
        "#     directory=None,\n",
        "#     x_col='image_path',\n",
        "#     y_col='labels',  # Ensure your labels column is correctly named and formatted\n",
        "#     target_size=(224, 224),\n",
        "#     batch_size=32,\n",
        "#     class_mode='categorical'\n",
        "# )\n",
        "\n",
        "# print(len(train_generator))\n",
        "# if train_generator is None:\n",
        "#     raise ValueError(\"`train_generator` is not defined.\")\n",
        "# # print(train_generator.y_col)\n",
        "\n",
        "# val_generator = val_test_datagen.flow_from_dataframe(\n",
        "#     dataframe=val_data,\n",
        "#     directory=None,\n",
        "#     x_col='image_path',\n",
        "#     y_col='labels',\n",
        "#     target_size=(224, 224),\n",
        "#     batch_size=32,\n",
        "#     class_mode='categorical'\n",
        "# )\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "isT-gVLSto04"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "KFIWPISrgqki"
      },
      "outputs": [],
      "source": [
        "# import sklearn.utils as sku\n",
        "# print(sku.compute_class_weight.__doc__)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "pU2ntHqotJLn"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "QrMMYyKJi23Z"
      },
      "outputs": [],
      "source": [
        "# import sklearn.utils as sku\n",
        "# # print(sku.compute_class_weight.__doc__)\n",
        "# from sklearn.utils import compute_class_weight\n",
        "\n",
        "# # Calculate class weights for handling class imbalance\n",
        "# labels = train_data['labels'].values  # Make sure this reflects your actual labels\n",
        "# class_weights = compute_class_weight('balanced', classes=np.unique(labels), y=labels)\n",
        "# # class_weights = compute_class_weight('balanced', np.unique(labels), labels)\n",
        "# class_weights = dict(enumerate(class_weights))\n",
        "\n",
        "# # class_weights = compute_class_weight('balanced', np.unique(labels), labels)\n",
        "# labels_index = {label: index for index, label in enumerate(np.unique(labels))}\n",
        "# class_weights = {labels_index[label]: len(labels) / class_count\n",
        "#                  for label, class_count in zip(np.unique(labels), np.bincount([labels_index[label] for label in labels]))}\n",
        "# print(class_weights)\n",
        "\n",
        "# # optoinal upgraded weight distributor\n",
        "# # class_weights = compute_class_weight('balanced', classes=np.unique(train_data['labels']), y=train_data['labels'])\n",
        "# # class_weights_dict = {i : class_weights[i] for i in range(len(class_weights))}\n",
        "\n",
        "# # Load DenseNet169\n",
        "# base_model = DenseNet169(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
        "\n",
        "# # ...\n",
        "# # Load DenseNet169\n",
        "# base_model = DenseNet169(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
        "\n",
        "# # Adding custom layers on top\n",
        "# x = base_model.output\n",
        "# x = GlobalAveragePooling2D()(x)\n",
        "# x = Dense(256)(x)\n",
        "# x = BatchNormalization()(x)\n",
        "# x = Activation('relu')(x)\n",
        "# x = Dropout(0.5)(x)\n",
        "# x = Dense(128)(x)\n",
        "# x = BatchNormalization()(x)\n",
        "# x = Activation('relu')(x)\n",
        "# x = Dropout(0.5)(x)\n",
        "\n",
        "# # Output layer\n",
        "# output_layer = Dense(8, activation='softmax')(x)\n",
        "\n",
        "# # Create the model\n",
        "# model = Model(inputs=base_model.input, outputs=output_layer)\n",
        "\n",
        "# # predictions = Dense(len(np.unique(labels)), activation='softmax')(x)\n",
        "\n",
        "# # model = Model(inputs=base_model.input, outputs=predictions)\n",
        "\n",
        "# # Compile the model (to be defined based on your specific needs)\n",
        "# # model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "# model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# # Ready to train\n",
        "# history = model.fit(train_generator, epochs=10, validation_data=val_generator, class_weight=class_weights)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "X0Uoc7oRWUSo"
      },
      "outputs": [],
      "source": [
        "# model.save('best_model_two.keras')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VnZVbXKjVpjf"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 117,
      "metadata": {
        "id": "heAGK_QW6sYD"
      },
      "outputs": [],
      "source": [
        "# !pip install tensorflow"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "id": "tPv0TISP6uUZ"
      },
      "outputs": [],
      "source": [
        "# # DenseNet169 Model.Test Data\n",
        "# import tensorflow as tf\n",
        "# from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# import pandas as pd\n",
        "# import numpy as np\n",
        "\n",
        "# # Evaluate the model on the test data\n",
        "# test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "# test_generator = test_datagen.flow_from_dataframe(\n",
        "#     dataframe=test_data,\n",
        "#     directory=None,\n",
        "#     x_col='image_path',\n",
        "#     y_col='target',\n",
        "#     target_size=(224, 224),\n",
        "#     batch_size=32,\n",
        "#     class_mode='raw',  # Change class_mode to 'raw'\n",
        "#     shuffle=False  # Make sure not to shuffle the test data\n",
        "# )\n",
        "\n",
        "# # Now you can proceed with the rest of the code\n",
        "\n",
        "# test_loss, test_accuracy = model.evaluate(test_generator)\n",
        "# print(\"Test Loss:\", test_loss)\n",
        "# print(\"Test Accuracy:\", test_accuracy)\n",
        "\n",
        "\n",
        "# # Save the trained model\n",
        "# # model.save(\"trained_model.h5\")\n",
        "\n",
        "\n",
        "\n",
        "# # Model Interpretation (example: visualize feature importance)\n",
        "# # Code for interpretation goes here\n",
        "\n",
        "# # Ensemble Methods (example: stacking multiple models)\n",
        "# # Code for ensemble methods goes here\n",
        "\n",
        "# # Deployment (example: saving the model for deployment)\n",
        "# model.save(\"final_model_2.h5\")\n",
        "\n",
        "# # Continuous Monitoring (example: monitoring model performance)\n",
        "# # Code for continuous monitoring goes here\n",
        "\n",
        "# # Feedback Loop (example: collect feedback and retrain model)\n",
        "# # Code for feedback loop goes here\n",
        "\n",
        "# # Documentation and Reporting\n",
        "# # Document your model architecture, training process, and results\n",
        "# # Write a report summarizing your findings and conclusions\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#!pip install scipy"
      ],
      "metadata": {
        "id": "P54Bur-vjojV"
      },
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#!pip install tf-keras-vis\n"
      ],
      "metadata": {
        "id": "SrmtXx6GzQBn"
      },
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "g7y4DRzy04K9"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Code below was for GradCAM. It doesn't seem to working for CancerNet SCa model. It worked fine for DenseNet169. Commenting out the code for now\n"
      ],
      "metadata": {
        "id": "51jaRM1iNec_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# from PIL import Image\n",
        "# from PIL.ExifTags import TAGS\n",
        "# import numpy as np\n",
        "# import matplotlib.pyplot as plt\n",
        "# import tensorflow as tf\n",
        "# from tensorflow import keras\n",
        "\n",
        "# from tf_keras_vis.gradcam import GradcamPlusPlus\n",
        "# from tf_keras_vis.utils import normalize\n",
        "# from scipy import ndimage\n",
        "# from tensorflow.keras.layers import concatenate\n",
        "\n",
        "# # Load CancerNetSca model\n",
        "# model = tf.keras.models.load_model('CancerNet_best_model.keras')\n",
        "\n",
        "# print(model.input_shape)\n",
        "\n",
        "# # Initialize GradcamPlusPlus with a model modifier\n",
        "# # gradcam = GradcamPlusPlus(model)\n",
        "\n",
        "# def get_image_metadata(image_path):\n",
        "#     img = Image.open(image_path)\n",
        "#     info = img._getexif()\n",
        "#     metadata = {}\n",
        "#     if info:\n",
        "#         for tag, value in info.items():\n",
        "#             metadata[TAGS.get(tag)] = value\n",
        "#     return metadata\n",
        "\n",
        "# def preprocess_image(image_path):\n",
        "#     img = tf.keras.preprocessing.image.load_img(image_path, target_size=(224, 224))\n",
        "#     img_array = tf.keras.preprocessing.image.img_to_array(img)\n",
        "#     img_array = np.expand_dims(img_array, axis=0) / 255.0  # Normalize image data\n",
        "#     return img_array\n",
        "\n",
        "# def preprocess_metadata(metadata):\n",
        "#     # Process your metadata here\n",
        "#     metadata_array = np.array([[0, 0, 0, 0, 0]])  # Replace with the actual metadata\n",
        "#     metadata_array = np.repeat(metadata_array, 224, axis=0)  # Repeat along height\n",
        "#     metadata_array = np.repeat(metadata_array, 224, axis=1)  # Repeat along width\n",
        "#     metadata_array = np.expand_dims(metadata_array, axis=0)  # Add batch dimension\n",
        "#     metadata_array = np.expand_dims(metadata_array, axis=-1)  # Add an extra dimension\n",
        "#     metadata_array = metadata_array[:, :, :224, :]  # Resize to match image width\n",
        "#     return metadata_array\n",
        "\n",
        "# def loss(output):\n",
        "#     return output\n",
        "\n",
        "# def model_modifier(model, img_array, metadata_array):\n",
        "#     return tf.keras.layers.Concatenate()([model.inputs[0], tf.cast(metadata_array, tf.float32)])\n",
        "\n",
        "\n",
        "# def generate_gradcam(model, img_array, metadata_array, layer_name):\n",
        "#     # Concatenate img_array and metadata_array along the last axis\n",
        "#     combined_input = np.concatenate([img_array, metadata_array], axis=-1)\n",
        "\n",
        "#     # Initialize GradcamPlusPlus with the model_modifier\n",
        "#     gradcam = GradcamPlusPlus(model, model_modifier=lambda x: model_modifier(x, img_array, metadata_array))\n",
        "\n",
        "#     # Generate Grad-CAM visualization\n",
        "#     cam = gradcam(loss, seed_input=combined_input, penultimate_layer=layer_name)\n",
        "\n",
        "#     # Normalize Grad-CAM heatmap\n",
        "#     cam = normalize(cam)\n",
        "\n",
        "#     return cam\n",
        "\n",
        "\n",
        "# # Example usage:\n",
        "# image_path_for_GradCAM = '/content/ISIC_2019_Training_Input/ISIC_2019_Training_Input/ISIC_0057266.jpg'\n",
        "# metadata_for_array = get_image_metadata(image_path_for_GradCAM)\n",
        "\n",
        "# # Preprocess image and metadata\n",
        "# img_array = preprocess_image(image_path_for_GradCAM)\n",
        "# metadata_array = preprocess_metadata(metadata_for_array)\n",
        "\n",
        "# # Choose a layer for visualization\n",
        "# layer_name = 'conv2d_1'\n",
        "\n",
        "# # Generate Grad-CAM visualization\n",
        "# model_wrapper = tf.keras.Model(inputs=model.input, outputs=model.output)\n",
        "# cam = generate_gradcam(model_wrapper, img_array, metadata_array, layer_name)\n",
        "# # cam = generate_gradcam(model, img_array, metadata_array, layer_name)\n",
        "\n",
        "# # Overlay the heatmap on the original image\n",
        "# plt.imshow(img_array[0])\n",
        "# plt.imshow(cam[0], cmap='jet', alpha=0.5)\n",
        "# plt.axis('off')\n",
        "# plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "KspGkgovdXt7"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 112,
      "metadata": {
        "id": "VnQp2whvpC0C"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8KavYs_jZgh6"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 113,
      "metadata": {
        "id": "e_bOsRFUVqb2"
      },
      "outputs": [],
      "source": [
        "# The following code works for DeniseNet model\n",
        "# Model Interpretation (example: visualize feature importance)\n",
        "# Code for interpretation goes here\n",
        "# !pip install tf-keras-vis\n",
        "\n",
        "# import numpy as np\n",
        "# import matplotlib.pyplot as plt\n",
        "# import tensorflow as tf\n",
        "# from tf_keras_vis.gradcam import GradcamPlusPlus\n",
        "# from tf_keras_vis.utils import normalize\n",
        "\n",
        "# The following code works for DeniseNet model\n",
        "# Define a function to generate the Grad-CAM visualization\n",
        "# def generate_gradcam(model, img_array, layer_name):\n",
        "#     # Initialize GradCAM++ object\n",
        "#     gradcam = GradcamPlusPlus(model, model_modifier=None)\n",
        "\n",
        "#     # Define the loss function for Grad-CAM\n",
        "#     def loss(output):\n",
        "#         return tf.keras.backend.mean(output[:, tf.argmax(output[0])])\n",
        "\n",
        "#     # Generate Grad-CAM heatmap\n",
        "#     cam = gradcam(loss, img_array, penultimate_layer=layer_name)\n",
        "#     cam = normalize(cam)\n",
        "\n",
        "#     return cam\n",
        "\n",
        "# # Choose an image from the new data for visualization\n",
        "# # img_path = 'new_data_directory/image.jpg'\n",
        "# img_path ='/content/ISIC_2019_Training_Input/ISIC_2019_Training_Input/ISIC_0057266.jpg'\n",
        "\n",
        "# img = tf.keras.preprocessing.image.load_img(img_path, target_size=(224, 224))\n",
        "# img_array = tf.keras.preprocessing.image.img_to_array(img)\n",
        "# img_array = np.expand_dims(img_array, axis=0) / 255.0\n",
        "\n",
        "# # Choose a layer for visualization (e.g., the last convolutional layer before the GlobalAveragePooling2D layer)\n",
        "# layer_name = 'conv5_block32_concat'\n",
        "\n",
        "# # Generate Grad-CAM visualization\n",
        "# cam = generate_gradcam(model, img_array, layer_name)\n",
        "\n",
        "# # Overlay the heatmap on the original image\n",
        "# plt.imshow(img)\n",
        "# plt.imshow(cam[0], cmap='jet', alpha=0.5)\n",
        "# plt.axis('off')\n",
        "# plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 114,
      "metadata": {
        "id": "tVD3UwTHFV50"
      },
      "outputs": [],
      "source": [
        "# # The following code works for DeniseNet model\n",
        "# # Load the original image\n",
        "# original_img = tf.keras.preprocessing.image.load_img(img_path, target_size=(224, 224))\n",
        "\n",
        "# # Generate Grad-CAM visualization\n",
        "# cam = generate_gradcam(model, img_array, layer_name)\n",
        "\n",
        "# # Create a figure with two subplots\n",
        "# fig, axs = plt.subplots(1, 2, figsize=(12, 6))\n",
        "\n",
        "# # Plot the original image\n",
        "# axs[0].imshow(original_img)\n",
        "# axs[0].set_title('Original Image')\n",
        "# axs[0].axis('off')\n",
        "\n",
        "# # Plot the Grad-CAM heatmap overlaid on the original image\n",
        "# heatmap = axs[1].imshow(original_img)\n",
        "# axs[1].imshow(cam[0], cmap='jet', alpha=0.5)\n",
        "# axs[1].set_title('Grad-CAM Visualization')\n",
        "# axs[1].axis('off')\n",
        "\n",
        "# # Add colorbar for the heatmap\n",
        "# plt.colorbar(heatmap, ax=axs[1], orientation='horizontal')\n",
        "\n",
        "# # Show the figure\n",
        "# plt.tight_layout()\n",
        "# plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "33X4jPapEAnH"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "V100",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
